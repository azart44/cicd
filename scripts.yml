variables:


.determine_environment:
  script:
    - |
      echo "======== Determining environment based on job name ========"
      if [[ "$CI_JOB_NAME" == *":stg"* ]]; then
        export ENV=stg
      elif [[ "$CI_JOB_NAME" == *":prd"* ]]; then
        export ENV=prd
      elif [[ "$CI_JOB_NAME" == *":dev"* ]]; then
        export ENV=dev
      else
        echo "No matching environment found for job name: $CI_JOB_NAME"
        exit 1
      fi

.configure_git_url:
  script:
    - |
      echo "======== Configuring Git URL for GitLab.com ========"
      git config --global url."https://oauth2:$GITLAB_ACCESS_TOKEN@gitlab.com/".insteadOf "https://gitlab.com/"

.change_directory:
  script:
    - |
      echo "======== Changing directory to $TF_ROOT ========"
      cd $TF_ROOT/$ENV

.init_terraform:
  script:
    - |
      echo "======== Initializing Terraform with GitLab backend ========"
      terraform init \
        -backend-config="address=${TF_ADDRESS}" \
        -backend-config="lock_address=${TF_LOCK_ADDRESS}" \
        -backend-config="unlock_address=${TF_UNLOCK_ADDRESS}" \
        -backend-config="username=${TF_USERNAME}" \
        -backend-config="password=${TF_PASSWORD}" \
        -backend-config="lock_method=${TF_LOCK_METHOD}" \
        -backend-config="unlock_method=${TF_UNLOCK_METHOD}" \
        -backend-config="retry_wait_min=${TF_RETRY_WAIT_MIN}"

.plan:
  script:
    - |
      echo "======== Terraform version ========"
      terraform --version
    - !reference [.init_terraform, script]
    - |
      echo "======== Running Terraform plan ========"
      terraform plan -out=plan-$ENV.tfout
  artifacts:
    paths:
      - $TF_ROOT/$ENV/plan-$ENV.tfout
    expire_in: 1 week

.apply:
  script:
    - |
      echo "======== Terraform version ========"
      terraform --version
    - !reference [.init_terraform, script]
    - |
      echo "======== Applying Terraform plan ========"
      terraform apply plan-$ENV.tfout

.destroy:
  script:
    - |
      echo "======== Terraform version ========"
      terraform --version
    - !reference [.init_terraform, script]
    - |
      echo "======== Destroying infrastructure ========"
      terraform destroy -auto-approve

.sonar_check:
  script:
    - |
      echo "======== Running SonarQube analysis ========"
      sonar-scanner -Dsonar.projectKey=niv-oniiva-$CI_PROJECT_NAME

# Exemple de jobs qui utilisent ces templates
# Vous pouvez personnaliser ces jobs selon vos besoins

plan:dev:
  extends:
    - .determine_environment
    - .configure_git_url
    - .change_directory
    - .plan
  only:
    - branches
    - merge_requests
  except:
    - main

apply:dev:
  extends:
    - .determine_environment
    - .configure_git_url
    - .change_directory
    - .apply
  only:
    - branches
    - merge_requests
  except:
    - main
  when: manual
  dependencies:
    - plan:dev

plan:stg:
  extends:
    - .determine_environment
    - .configure_git_url
    - .change_directory
    - .plan
  only:
    - main
  when: manual

apply:stg:
  extends:
    - .determine_environment
    - .configure_git_url
    - .change_directory
    - .apply
  only:
    - main
  when: manual
  dependencies:
    - plan:stg

plan:prd:
  extends:
    - .determine_environment
    - .configure_git_url
    - .change_directory
    - .plan
  only:
    - tags
  when: manual

apply:prd:
  extends:
    - .determine_environment
    - .configure_git_url
    - .change_directory
    - .apply
  only:
    - tags
  when: manual
  dependencies:
    - plan:prd

sonarqube:
  extends:
    - .sonar_check
  only:
    - merge_requests
    - main
    - tags